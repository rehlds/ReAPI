name: C/C++ CI

on:
  push:
    branches: [master]
    paths-ignore:
      - '**.md'

  pull_request:
    types: [opened, reopened, synchronize]
  release:
    types: [published]

jobs:
  windows:
    name: 'Windows'
    runs-on: windows-2019

    env:
      solution: 'msvc/reapi.sln'
      buildPlatform: 'Win32'
      buildRelease: 'Release'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Build
        run: |
          msbuild ${{ env.solution }} -p:Configuration="${{ env.buildRelease }}" /t:Clean,Build /p:Platform=${{ env.buildPlatform }} /p:PlatformToolset=v140_xp /p:XPDeprecationWarning=false

      - name: Move files
        run: |
          mkdir publish\debug
          mkdir publish\addons\amxmodx\modules

          move msvc\${{ env.buildRelease }}\reapi_amxx.dll publish\addons\amxmodx\modules\reapi_amxx.dll
          move msvc\${{ env.buildRelease }}\reapi_amxx.pdb publish\debug\reapi_amxx.pdb

      - name: Deploy artifacts
        uses: actions/upload-artifact@v2
        with:
          name: win32
          path: publish/*

  linux:
    name: 'Linux'
    runs-on: ubuntu-latest
    container: s1lentq/linux86buildtools:latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Build using Intel C++ Compiler 19.0
        run: |
          rm -rf build && CC=icc CXX=icpc cmake -B build && cmake --build build -j8

      - name: Prepare AMXX
        run: |
          mkdir -p publish/addons/amxmodx/modules
          rsync -a reapi/extra/amxmodx/ publish/addons/amxmodx/
          rsync -a reapi/version/reapi_version.inc publish/addons/amxmodx/scripting/include/

      - name: Move files
        run: |
          mv build/reapi/reapi_amxx_i386.so publish/addons/amxmodx/modules/reapi_amxx_i386.so
          mv reapi/version/appversion.h publish/appversion.h

      - name: Run GLIBC/ABI version compat test
        run: |
          binaries=(
            "publish/addons/amxmodx/modules/reapi_amxx_i386.so"
          )
          bash ./reapi/version/glibc_test.sh ${binaries[@]}
          if [[ $? -ne 0 ]]; then
            exit 1 # Assertion failed
          fi
        shell: bash

      - name: Deploy artifacts
        uses: actions/upload-artifact@v2
        id: upload-job
        with:
          name: linux32
          path: publish/*

      - name: Cleanup temporary artifacts
        if: success() && steps.upload-job.outcome == 'success'
        run: |
          rm -f appversion.h

  publish:
    name: 'Publish'
    runs-on: ubuntu-latest
    needs: [windows, linux]

    steps:
      - name: Deploying linux artifacts
        uses: actions/download-artifact@v2
        with:
          name: linux32

      - name: Deploying windows artifacts
        uses: actions/download-artifact@v2
        with:
          name: win32

      - name: Reading appversion.h
        run: |
          if [ -e appversion.h ]; then
            APP_VERSION=$(cat appversion.h | grep -wi '#define APP_VERSION_STRD' | sed -e 's/#define APP_VERSION_STRD[ \t\r\n\v\f]\+\(.*\)/\1/i' -e 's/\r//g')
            if [ $? -ne 0 ]; then
              APP_VERSION=""
            else
              # Remove quotes
              APP_VERSION=$(echo $APP_VERSION | xargs)
              echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV
            fi
          fi
          rm -f appversion.h

      - name: Packaging binaries
        id: packaging-job
        if: |
          github.event_name == 'release' &&
          github.event.action == 'published' &&
          startsWith(github.ref, 'refs/tags/')
        run: |
          7z a -tzip reapi-bin-${{ env.APP_VERSION }}.zip addons/

      - name: Publish artifacts
        uses: softprops/action-gh-release@v1
        id: publish-job
        if: |
          startsWith(github.ref, 'refs/tags/') &&
          steps.packaging-job.outcome == 'success'
        with:
          files: |
            *.zip
        env:
          GITHUB_TOKEN: ${{ secrets.API_TOKEN }}

      - name: Cleanup temporary artifacts
        if: success() && steps.publish-job.outcome == 'success'
        run: |
          rm -rf addons debug
          rm -f *.zip appversion.h
